PI => 3.1415926535897931
TAU => 6.2831853071795862
e => 2.7182818284590451

pow: func(base, exp) =>
    if exp == 0:
        <- 1
    endif

    if exp > 0:
        <- base * !(pow base exp - 1)
    else:
        <- (1 / base) * !(pow base exp + 1)
    endif
endfn

gcd: func(x, y) =>
    # Algoritmo de Euclides
    # Función recursiva:
    # if (x == 0) => <- y
    # <- !gcd(y % x, x)
    z => 0
    while x /= 0:
        z => x
        x => y % x
        y => z
    endwl
    <- y
endfn

lcm: func(x, y) =>
    <- (x * y) / !(gcd x y)
endfn


# Floor redondea hacia el infinito negativo
# Ceil redondea arriba o abajo hacia el 0
# Truncate trunca arriba o abajo hacia el 0
#
# Floor(-3.4)    = -4
# Truncate(-3.4) = -3
#
# Floor(3.4)    = 3
# Truncate(3.4) = 3

floor: func(x) =>
    <- x - x % 1
endfn

ceil: func(x) =>
    <- !(floor x) + 1
endfn

# HACK: Buscar manera de implementar esta función y 'ceil' (y tal vez floor)
# de manera correcta.
trunc: func(x) =>
    if !(fabs x) == x:
        <- !(floor x)
    endif
    <- !(ceil x)
endfn

# Valor absoluto con flotantes
abs: func(x) =>
    if x < 0:
        <- -x
    endif
    <- x
endfn

factorial: func(n) =>
    arr => [1]
    count => 1

    while count <= n, count => count + 1:
        (count @ arr) => count * (count - 1) @ arr
    endwl
    <- n @ arr
endfn

degrees: func(rad) =>
  <- rad * 180 / PI
endfn

radians: func(deg) =>
  <- deg * PI / 180
endfn
